import{_ as e,c as s,o as a,O as o}from"./chunks/framework.8e4cc2b6.js";const f=JSON.parse('{"title":"Kotlin expression","description":"","frontmatter":{},"headers":[],"relativePath":"reference/annotations/kotlinexpression.md","lastUpdated":1682392529000}'),n={name:"reference/annotations/kotlinexpression.md"},t=o(`<h1 id="kotlin-expression" tabindex="-1">Kotlin expression <a class="header-anchor" href="#kotlin-expression" aria-label="Permalink to &quot;Kotlin expression&quot;">​</a></h1><p>In Kotlin, an <a href="https://kotlinlang.org/spec/expressions.html" target="_blank" rel="noreferrer">expression</a> consists of variables, operators, methods calls etc. that can be evaluated to a single value. Expression can be arbitrarily nested via method calls, and combined via operators. Since frame on the OpenCUI is directly mapped as Kotlin class, and slot become property of that class, we can use Kotlin expression on platform directly when need some value, for example, various condition needs boolean valued expression, and value rec needs list of object of given types. Using Kotlin expression to express condition for example can give builder the raw expressive power, thus make it possible to encode arbitrary business logic.</p><p>It should be fairly easy to write Kotlin expression to specify some value, even if you do not know Kotlin that much buy understand some modern language, here are the common thing that might help you.</p><h4 id="if-expression" tabindex="-1">if expression <a class="header-anchor" href="#if-expression" aria-label="Permalink to &quot;if expression&quot;">​</a></h4><p>In Kotlin &#39;if&#39; is an expression. It is called an expression because it compares the values of a and b and returns the maximum value. Therefore, in Kotlin there is no ternary operator (condition)?a:b because it is replaced by the if expression.</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">condition</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> b</span></span></code></pre></div><p>Here we usually expect that a and b are of the same type.</p><h4 id="when-expression" tabindex="-1">when expression <a class="header-anchor" href="#when-expression" aria-label="Permalink to &quot;when expression&quot;">​</a></h4><p>If it is used as an expression, the value of the branch with which condition satisfied will be the value of overall expression. As an expression when returns a value with which the argument matches and we can store it in a variable or print directly.</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">when</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dayOfWeek</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Weekday</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Weekend</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Something terribly wrong</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="operator" tabindex="-1">!! operator <a class="header-anchor" href="#operator" aria-label="Permalink to &quot;!! operator&quot;">​</a></h4><p>The not-null assertion operator (!!) converts any value to a non-null type and throws an exception if the value is null. You can write b!!, and this will return a non-null value of b (for example, a String in our example) or throw an NPE if b is null. This is useful to make things fail early, and thus make debug easier.</p><h4 id="elvis-operator" tabindex="-1">Elvis operator <a class="header-anchor" href="#elvis-operator" aria-label="Permalink to &quot;Elvis operator&quot;">​</a></h4><p>When you have a nullable reference, b, you can say &quot;if b is not null, use it, otherwise use some non-null value&quot;:</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;">  b </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> c</span></span></code></pre></div><p>can be simplified to:</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">b ? c</span></span></code></pre></div><h4 id="this-expression" tabindex="-1">This expression <a class="header-anchor" href="#this-expression" aria-label="Permalink to &quot;This expression&quot;">​</a></h4><p>you use this expressions:</p><ol><li>In a member of a class, this refers to the current object of that class.</li><li>In an extension function or a function literal with receiver this denotes the receiver parameter that is passed on the left-hand side of a dot.</li></ol><h4 id="equality-operator" tabindex="-1">Equality operator <a class="header-anchor" href="#equality-operator" aria-label="Permalink to &quot;Equality operator&quot;">​</a></h4><p>In Kotlin there are two types of equality:</p><ol><li>Structural equality (== - a check for equals())</li><li>Referential equality (=== - two references point to the same object) We can use != or !== for negation.</li></ol><p>Reference:</p><ol><li><a href="https://kotlinlang.org/docs/null-safety.html" target="_blank" rel="noreferrer">Kotlin null safety</a></li><li><a href="https://kotlinlang.org/docs/operator-overloading.html" target="_blank" rel="noreferrer">Operator overloading</a></li><li><a href="https://kotlinlang.org/docs/equality.html" target="_blank" rel="noreferrer">Equality</a></li></ol>`,25),l=[t];function r(i,p,c,h,u,d){return a(),s("div",null,l)}const D=e(n,[["render",r]]);export{f as __pageData,D as default};
